# # 🔍 Deployment kubernetes
# apiVersion: apps/v1 
# kind: Deployment  # <-- change resource type ReplicaSet to Deployment
# metadata: 
#   name: nginx
#   # Edi DEPLOYMENT-Resource labels, prati resources ki dhani OWN labels untaee. 
#   labels:
#     purpose: deployment-demo
#     project: roboshop
#     app: nginx
# spec:
#   replicas: 2   # <-- s letter. and mention hoe many you same pods needs to be created Number
#   # These are the labels ReplicaSet use to create pod replicas, this should match pod labels. 
#   selector:
#     matchLabels:    # <---
#       purpose: deployment-demo
#       project: roboshop
#       app: nginx
# # This is POD definition
#   template: 
#     metadata:   # Ekkada name anedi automatic gha adi create chestumdhi, Pod name + random 5 digit number or code
#       labels:
#         purpose: deployment-demo
#         project: roboshop
#         app: nginx   
#     spec:
#       containers:
#       - name: nginx
#         image: nginx:latest
#         # image: nginx:stable-perl

# 🔍 Deployment kubernetes
apiVersion: apps/v1 
kind: Deployment  # <-- change resource type ReplicaSet to Deployment
metadata: 
  name: nginx
  # Edi DEPLOYMENT-Resource labels, prati resources ki dhani OWN labels untaee. 
  labels:
    purpose: deployment-demo
    project: roboshop
    app: nginx
spec:
  replicas: 3   # <-- s letter. and mention hoe many you same pods needs to be created Number
  # These are the labels ReplicaSet use to create pod replicas, this should match pod labels. 
  selector:
    matchLabels:    # <---
      purpose: deployment-demo
      project: roboshop
      app: nginx
# This is POD definition
  template: 
    metadata:   # Ekkada name anedi automatic gha adi create chestumdhi, Pod name + random 5 digit number or code
      labels:
        purpose: deployment-demo
        project: roboshop
        app: nginx   
    spec:
      containers:
      - name: nginx
        image: nginx:latest
        # image: nginx:stable-perl
---
# 🔍 kubernetes service
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
  labels:
    purpose: service-demo
spec:
  selector:
    purpose: deployment-demo
    project: roboshop
    environment: nginx
  ports:
    - protocol: TCP
      port: 80 # service port
      targetPort: 80 # container port 

# 1️⃣ Rule of Thumb

# 👉 Every resource can have its own labels.
# 👉 But matching happens only when SELECTOR = LABELS.
# If Service selector labels don’t match Pod labels → Service won’t find those Pods.

# 3️⃣ Simple Analogy 🎟️

# Pod = Person
# Labels = Name tags on the shirt
# Service = Bouncer at the party checking tags

# Example:

# Person’s shirt says:
# purpose=deployment-demo, project=roboshop, app=nginx

# Bouncer is looking for:
# purpose=deployment-demo, project=roboshop, environment=dev

# 👉 Since no person has "environment=dev", bouncer lets no one in.

# 5️⃣ Golden Rule ✨

# Deployment → Pod labels (template.metadata.labels)

# Service → must exactly match those labels
# Otherwise → Service = blind, won’t find Pods.

# 👉 Very easy way to remember:
# “Labels are IDs, selectors are searches. If ID ≠ Search → No Match.”


# Great question 👍 and this is one of the most common interview trick points in Kubernetes.

# Let’s break it down simply 👇

# ✅ Rule for Labels & Selectors

# Pods can have many labels (example: 4 labels).

# Service selector doesn’t need to list all of them.
# It only needs to match a subset of those labels.

# 👉 If at least the labels in the selector exist and match on the Pod, then that Pod is selected.

# 🎯 Example

# Pod labels:

# labels:
#   purpose: deployment-demo
#   project: roboshop
#   app: nginx
#   environment: dev


# Service selector (3 out of 4):

# selector:
#   purpose: deployment-demo
#   project: roboshop
#   app: nginx


# 👉 Result: ✅ Service will find these Pods because the 3 labels it’s looking for are present and match.
# environment=dev is extra in the Pod but that’s okay — Service ignores extra labels.

# ⚠️ When it fails

# If any one label in Service selector does not exist or doesn’t match in the Pod → ❌ No match.

# 🧠 Easy Memory Trick

# Think of it like:

# Pod labels = Person wearing many ID badges

# Service selector = Bouncer checks only 3 badges
# If those 3 badges are correct → ✅ Entry granted, even if the person has 10 other badges.

# ✅ So your doubt answer:
# You don’t need to give all 4 labels in Service selector.
# 3 labels matching is enough.